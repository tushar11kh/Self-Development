########################################## DAY4 ########################################## 

### Building memory log file 

=> standard library packages used:
    | Package   | Purpose                                                 |
    | --------- | ------------------------------------------------------- |
    | `bufio`   | Buffered I/O (used for efficient reading/writing files) |
    | `fmt`     | Formatted I/O: `Println`, `Sprintf`, etc.               |
    | `os`      | OS-level operations like opening files                  |
    | `strconv` | String â†” Number conversions                             |
    | `strings` | String manipulation functions                           |
    | `time`    | Time-related functions like `Sleep`, `Now`              |

=> os.Open: Opens a file for reading.

ðŸŸ¨ defer: Schedules file.Close() to run when getMemInfo exits â€” ensures file always closes even if an error occurs.

=> bufio.NewScanner(file variable) : Creates a buffered line-by-line scanner for the file. Basically string with spaces can be taken whole as input unlike scanf.
    sc:=bufio.NewScanner(file variable)
    sc.scan()->scans file
    sc.text()->read text

=> strings functions:
    | Function              | Purpose                                      |
    | --------------------- | -------------------------------------------- |
    | `strings.HasPrefix()` | Checks if line starts with `"MemTotal:"`     |
    | `strings.Fields()`    | Splits line into whitespace-separated tokens |
    | `strconv.Atoi()`      | Converts string to int                       |


=> bufio.NewWriter(logFile variable): Creates a buffered writer for the log file. Buffered I/O is faster and more efficient.

=> time.Now(): Gets current local time

=> .Format(...): Converts it to string in given format

=>
    | Function             | Purpose                                   |
    | -------------------- | ----------------------------------------- |
    | `fmt.Sprintf()`      | Builds a formatted string (like `printf`) |
    | `fmt.Print()`        | Writes to stdout                          |
    | `writer.WriteString` | Writes string to file buffer              |
    | `writer.Flush()`     | Forces writing buffered content to disk   |

    here [writer := bufio.NewWriter(logFile)]

=> Golang time layout
    time.Now().Format("02-01-2006 15:04:05")

=> go program here: https://github.com/tushar11kh/Self-Development/blob/main/week1/mem-usage/main.go

########################## Day 5 ##########################

### Building a cli to get cpu usage and memory usage using flag

=> flag library is used
=> flag.Bool/string/int etc(name,value,usage) ->start point for flag
=> flag.Parse() -> Parses the command-line flags and arguments passed to your Go program. You must call it before you use the values of any defined flags.Without calling flag.Parse(), the flags will not be initialized

=> github link: https://github.com/tushar11kh/Self-Development/blob/main/week1/flag_cli/main.go

########################################## DAY 6 ########################################## 

### Http 
=> functions and methods used when testing http get
ðŸŸ¢ http.Get (url string)

    Shorthand HTTP GET request. Returns: (*http.Response, error)

ðŸŸ¢ resp.Body (io.ReadCloser)

    Holds the actual body of the HTTP response.

    It needs to be closed after use â†’ resp.Body.Close()

ðŸŸ¢ io.ReadAll

    Reads all contents of an io.Reader (like a file or HTTP body).

    Returns ([]byte, error)

ðŸŸ¢ string(body)

    Converts raw byte data into a string for readable output.

flag_cli file with http => https://github.com/tushar11kh/Self-Development/blob/main/week2/flag_cli/main.go

########################################## DAY 8 ########################################## 

### writing an API to test

    ðŸ”¹ From net/http package

        http.HandleFunc() â€“ registers a route and handler function

        http.ListenAndServe() â€“ starts the HTTP server

        http.Error() â€“ sends an error response to the client

        r.URL.Query().Get("id") â€“ gets a query parameter from the URL (r is *http.Request)

    ðŸ”¹ From encoding/json package

        json.NewEncoder(w).Encode() â€“ encodes the person struct to JSON and writes the response

    ðŸ”¹ From log package

        log.Fatal() â€“ logs a fatal error and exits the program

    âœ… Go Types and Structs

        http.ResponseWriter â€“ interface used to construct an HTTP response

        *http.Request â€“ pointer to the HTTP request object

        map[string]Person â€“ a map used to store personal data based on ID

        struct â€“ used to define the Person type with Name and Age fields

    âœ… Other Key Elements

        json:"name" and json:"age" â€“ struct field tags for JSON serialization

        w.Header().Set("Content-Type", "application/json") â€“ sets the content type of the HTTP response to JSON

        log.Fatal â€“ terminates the program on server startup error

    âœ… Status http error

        http.StatusBadRequest

        http.StatusNotFound

        http.StatusInternalServerError

=> github : https://github.com/tushar11kh/Self-Development/blob/main/week2/testApi/main.go