########################################## DAY 6 ########################################## 

### Docker intro
https://docs.docker.com/get-started/docker-overview/

########################################## DAY 7 ########################################## 

### Most used commands

ðŸ”¹ 1. ðŸ”§ Image Management

| Command                    | Description                                    |
| -------------------------- | ---------------------------------------------- |
| `docker build -t <name> .` | Build image from Dockerfile                    |
| `docker images`            | List all local images                          |
| `docker rmi <image>`       | Remove an image                                |
| `docker pull <image>`      | Download image from Docker Hub                 |
| `docker push <image>`      | Upload image to Docker Hub (must be logged in) |

ðŸ”¹ 2. ðŸ“¦ Container Lifecycle

| Command                            | Description                             |
| ---------------------------------- | --------------------------------------- |
| `docker run <image>`               | Run a container from an image           |
| `docker run -it <image> /bin/bash` | Run container with terminal access      |
| `docker run -d <image>`            | Run container in background (detached)  |
| `docker start <container>`         | Start a stopped container               |
| `docker stop <container>`          | Gracefully stop a container             |
| `docker kill <container>`          | Forcefully stop a container             |
| `docker rm <container>`            | Remove a container                      |
| `docker ps`                        | Show running containers                 |
| `docker ps -a`                     | Show all containers (including stopped) |

ðŸ”¹ 3. ðŸ“‚ Working with Containers

| Command                                    | Description                                           |
| ------------------------------------------ | ----------------------------------------------------- |
| `docker exec -it <container> bash`         | Run a shell inside the container                      |
| `docker logs <container>`                  | Show container logs                                   |
| `docker inspect <container>`               | View detailed container info (IP, env, mounts)        |
| `docker cp <container>:<path> <host-path>` | Copy file from container to host                      |
| `docker diff <container>`                  | Show file changes in container (useful for debugging) |


ðŸ”¹ 4. ðŸ§± Volumes & Networks (used often in real-world setups)

| Command                        | Description           |
| ------------------------------ | --------------------- |
| `docker volume ls`             | List volumes          |
| `docker volume create <name>`  | Create named volume   |
| `docker volume inspect <name>` | Details of a volume   |
| `docker network ls`            | List networks         |
| `docker network create <name>` | Create custom network |

ðŸ”¹ 5. ðŸ“¦ Image Save, Load, Export (for cross-machine usage)

| Command                            | Description                          |
| ---------------------------------- | ------------------------------------ |
| `docker save -o image.tar <image>` | Save image to `.tar` file            |
| `docker load -i image.tar`         | Load image from `.tar` file          |
| `docker export <container>`        | Export container FS (not image)      |
| `docker import <file>`             | Create image from exported container |


###

=> Simple Dockerfile

        # Base image with Go tools installed
        FROM golang:1.21-alpine

        # Set working directory inside the container
        WORKDIR /app

        # Copy go.mod and go.sum files first for dependency caching
        COPY go.mod go.sum ./

        # Download dependencies
        RUN go mod download

        # Copy the rest of your source code
        COPY . .

        # Build the application
        RUN go build -o myapp

        # Run the application by default
        CMD ["./myapp"]


Basic Structure of a Dockerfile

=>Each line in a Dockerfile is an instruction. Common instructions include:

    Base Image (FROM):Specifies the starting point. Many official images exist for common languages and operating systems.

    Working Directory (WORKDIR):Sets the folder all subsequent commands operate from.

    Copy Files (COPY):Moves files from your local project into the image. Best practice is to copy dependency files and download libraries before adding entire source code, enabling Docker to cache layers and speed up rebuilds.

    Run Commands (RUN):Installs dependencies, compiles code, or performs setup tasks. Each RUN creates a new image layer.

    Start Command (CMD or ENTRYPOINT):Defines what happens when the container starts. CMD can be overridden at runtime, while ENTRYPOINT is fixed in most use-cases.

    ENV: Set environment variables.

    EXPOSE: Document the ports your app uses.


=> Multi-stage Dockerfile

        To separate the build process from the runtime environment for:

            Minimal final image size

            Improved security

            Code obfuscation (no source or build tools in final image)

            Clean, lean deployment image

        
        =>Example

            # Build stage
            FROM golang:1.24-bullseye AS builder

            WORKDIR /app
            COPY . .

            RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o main .

            # Runtime stage
            FROM alpine:latest

            WORKDIR /app

            COPY --from=builder /app/main .

            EXPOSE 8080

            CMD ["./main"]



=>Remove docker files,containers,volumes etcâ€¦â€¦.. do look at allâ€”forceâ€¦â€¦modify accordingly
 
        2177* docker rmi -f testingapi\n
        2178* docker images\n
        2179* docker builder prune --all --force\n
        2180* docker system prune --all --volumes â€”-force\n


=>to do on mac

        docker buildx build --no-cache --platform linux/amd64 --load -t testingapi .    -> mac build to linux build (optional(no-cache))

        docker save -o testingapi.tar testingapi

        scp -i ~/.ssh/ubuntu_mac_key testingapi.tar tk@192.168.1.17:~/ -> copy from mac to ubuntu


=> Run on ubuntu

        docker load -i testingapi.tar -> on ubuntu terminal

        docker run -d -p 8080:8080 --name testingapi-server testingapi

